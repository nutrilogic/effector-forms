{"version":3,"file":"effector-forms.iife.js","sources":["../src/create-form-unit.ts","../src/field.ts","../src/validation.ts","../src/react-hooks.ts","../src/factory.ts"],"sourcesContent":["import { createStore, createEvent, Domain, Store, Event } from \"effector\"\n\ntype CreateStoreParams<Value> = {\n  init: Value\n  domain?: Domain\n  existing?: Store<Value>\n}\n\nfunction store<Value>(\n    { init, domain, existing }: CreateStoreParams<Value>,\n    effectorData?: any\n) {\n    if (existing) {\n        return existing\n    }\n    return domain\n        ? domain.store(init, effectorData)\n        : createStore(init, effectorData)\n}\n\ntype CreateEventParams<Value> = {\n  domain?: Domain\n  existing?: Event<Value>\n}\n\nfunction event<Value>({ domain, existing }: CreateEventParams<Value>) {\n    if (existing) {\n        return existing\n    }\n    return domain ? domain.event<Value>() : createEvent<Value>()\n}\n\nexport const createFormUnit = {\n    store,\n    event,\n}\n","import {\n    createStore,\n    Domain,\n    Event,\n    Store,\n    combine,\n    sample,\n    guard,\n    merge,\n} from \"effector\"\nimport {\n    ValidationError,\n    Field,\n    FieldData,\n    FieldConfig,\n    AnyFormValues,\n    ValidationEvent,\n    Rule,\n    RuleResolver,\n} from \"./types\"\nimport { createCombineValidator } from \"./validation\"\nimport { createFormUnit } from \"./create-form-unit\"\n\nexport function createField(\n    fieldName: string,\n    fieldConfig: FieldConfig<any>,\n    domain?: Domain,\n): Field<any> {\n    const initValue = typeof fieldConfig.init === \"function\"\n        ? fieldConfig.init()\n        : fieldConfig.init\n\n    const $initialValue = createFormUnit.store({\n        domain,\n        existing: fieldConfig.units?.$initialValue,\n        init: initValue,\n    }, { sid: `${fieldName}-initialValue`})\n    const $value = createFormUnit.store({\n        domain,\n        existing: fieldConfig.units?.$value,\n        init: initValue,\n    }, { sid: `${fieldName}-value`})\n\n    const $errors = createFormUnit.store<ValidationError[]>({\n        domain,\n        existing: fieldConfig.units?.$errors,\n        init: [],\n    }, { sid: `${fieldName}-errors`})\n\n\n    const $firstError = $errors.map(\n        (errors) => errors[0] ? errors[0] : null\n    )\n\n    const $isDirty = combine($initialValue, $value, \n        (initialValue, value) => value !== initialValue\n    )\n\n    const $touched = createFormUnit.store({\n        domain,\n        existing: fieldConfig.units?.$isTouched,\n        init: false,\n    }, `${fieldName}-initialValue`)\n\n    const onChange = createFormUnit.event({\n        domain,\n        existing: fieldConfig.units?.onChange,\n    })\n    const onBlur = createFormUnit.event({\n        domain,\n        existing: fieldConfig.units?.onBlur,\n    })\n    const changed = createFormUnit.event({\n        domain,\n        existing: fieldConfig.units?.changed,\n    })\n    const addError = createFormUnit.event<{\n        rule: string\n        errorText?: string\n    }>({\n        domain,\n        existing: fieldConfig.units?.addError,\n    })\n    const validate = createFormUnit.event({\n        domain,\n        existing: fieldConfig.units?.validate,\n    })\n    const resetErrors = createFormUnit.event({\n        domain,\n        existing: fieldConfig.units?.resetErrors,\n    })\n    const resetValue = createFormUnit.event({\n        domain,\n        existing: fieldConfig.units?.resetValue,\n    })\n    const reset = createFormUnit.event({\n        domain,\n        existing: fieldConfig.units?.reset,\n    })\n\n    const $isValid = $firstError.map((firstError) => firstError === null)\n\n    const $field = combine({\n        value: $value,\n        errors: $errors,\n        firstError: $firstError,\n        isValid: $isValid,\n        isDirty: $isDirty,\n        isTouched: $touched,\n    })\n\n    return {\n        changed,\n        name: fieldName,\n        $initialValue,\n        $value,\n        $errors,\n        $firstError,\n        $isValid,\n        $isDirty,\n        $isTouched: $touched,\n        $touched,\n        $field: $field as Store<FieldData<any>>,\n        onChange,\n        onBlur,\n        addError,\n        validate,\n        set: onChange,\n        reset,\n        resetErrors,\n        resetValue,\n        filter: fieldConfig.filter,\n    }\n}\n\ntype BindValidationParams = {\n    $form: Store<AnyFormValues>\n    validateFormEvent: Event<void>\n    submitEvent: Event<void>\n    resetFormEvent: Event<void>\n    resetValues: Event<void>\n    resetErrors: Event<void>\n    field: Field<any>\n    rules: Rule<any, any>[] | RuleResolver<any, any>\n    formValidationEvents: ValidationEvent[]\n    fieldValidationEvents: ValidationEvent[]\n}\n\nexport function bindValidation({\n    $form,\n    validateFormEvent,\n    submitEvent,\n    resetFormEvent,\n    resetValues,\n    field,\n    rules,\n    resetErrors: resetErrorsFormEvent,\n    formValidationEvents,\n    fieldValidationEvents,\n}: BindValidationParams,\neffectorData?: any): void {\n    const {\n        $value,\n        $errors,\n        onBlur,\n        changed,\n        addError,\n        validate,\n        resetErrors,\n        resetValue,\n        reset,\n    } = field\n\n    const rulesSources = typeof rules === \"function\"\n        ? createStore<any[]>([], effectorData)\n        : combine(\n            rules.map(({ source }) => source || createStore(null, effectorData))\n        )\n\n    const validator = createCombineValidator(rules)\n    const eventsNames = [...formValidationEvents, ...fieldValidationEvents]\n    const validationEvents: Event<{\n        fieldValue: any\n        form: AnyFormValues\n        rulesSources: any[]\n    }>[] = []\n\n    if (eventsNames.includes(\"submit\")) {\n        const validationTrigger = sample({\n            source: combine({\n                fieldValue: $value,\n                form: $form,\n                rulesSources,\n            }),\n            clock: submitEvent,\n        })\n\n        validationEvents.push(validationTrigger)\n    }\n\n    if (eventsNames.includes(\"blur\")) {\n        validationEvents.push(sample({\n            source: combine({\n                fieldValue: $value,\n                form: $form,\n                rulesSources,\n            }),\n            clock: onBlur,\n        }))\n    }\n\n    if (eventsNames.includes(\"change\")) {\n        validationEvents.push(sample({\n            source: combine({\n                fieldValue: $value,\n                form: $form,\n                rulesSources,\n            }),\n            clock: merge(\n                [changed, resetValue, resetValues]\n            ),\n        }))\n    }\n\n    validationEvents.push(sample({\n        source: combine({\n            fieldValue: $value,\n            form: $form,\n            rulesSources,\n        }),\n        clock: validate,\n    }))\n\n    validationEvents.push(sample({\n        source: combine({\n            fieldValue: $value,\n            form: $form,\n            rulesSources,\n        }),\n        clock: validateFormEvent,\n    }))\n\n    const addErrorWithValue = sample({\n        source: $value,\n        clock: addError,\n        fn: (value, { rule, errorText }): ValidationError => ({\n            rule,\n            value,\n            errorText,\n        }),\n    })\n\n    $errors\n        .on(\n            validationEvents,\n            (_, { form, fieldValue, rulesSources }) => validator(\n                fieldValue,\n                form,\n                rulesSources,\n            )\n        )\n        .on(addErrorWithValue, (errors, newError) => [newError, ...errors])\n        .reset(resetErrors, resetFormEvent, reset, resetErrorsFormEvent)\n\n    if (!eventsNames.includes(\"change\")) {\n        $errors.reset(changed)\n    }\n}\n\nexport function bindChangeEvent(\n    {\n        $initialValue,\n        $value,\n        $touched,\n        onChange,\n        changed,\n        name,\n        reset,\n        resetValue,\n        filter }: Field<any>,\n    setForm: Event<Partial<AnyFormValues>>,\n    resetForm: Event<void>,\n    resetTouched: Event<void>,\n    resetValues: Event<void>,\n    setInitial: Event<Partial<AnyFormValues>>,\n): void {\n\n    $touched\n        .on(changed, () => true)\n        .reset(reset, resetForm, resetTouched)\n\n    guard({\n        source: onChange,\n        filter: filter || (() => true),\n        target: changed,\n    })\n\n    $initialValue.on(\n        setInitial,\n        (curr, updateSet) => updateSet.hasOwnProperty(name)\n            ? updateSet[name]\n            : curr\n    )\n\n    sample({\n        clock: [reset, resetValue, resetValues, resetForm],\n        source: $initialValue,\n        target: $value,\n    })\n\n    $value\n        .on(changed, (_, value) => value)\n        .on(\n            setForm,\n            (curr, updateSet) => updateSet.hasOwnProperty(name)\n                ? updateSet[name]\n                : curr\n        )\n}\n","import { Store, combine } from \"effector\"\nimport {\n    ValidationError,\n    Rule,\n    AnyFields,\n    RuleResolver,\n} from \"./types\"\n\nexport function createCombineValidator<Value = any, Form = any>(\n    rulesOrResolver: Rule<Value, Form, any>[] | RuleResolver<Value, Form>\n) {\n    return (\n        value: Value,\n        form: Form,\n        rulesSources?: any[]\n    ): ValidationError<Value>[] => {\n\n        const errors: ValidationError<Value>[] = []\n        const rules = typeof rulesOrResolver === \"function\"\n            ? rulesOrResolver(value, form)\n            : rulesOrResolver\n\n        for (let i = 0; i < rules.length; i++) {\n            const rule = rules[i]\n            const source = rulesSources ? rulesSources[i] : null\n            const result = rule.validator(value, form, source)\n\n            if (typeof result === \"boolean\" && !result) {\n                errors.push({\n                    rule: rule.name,\n                    errorText: rule.errorText,\n                    value,\n                })\n            }\n\n            if (typeof result === \"object\" && !result.isValid) {\n                errors.push({\n                    rule: rule.name,\n                    errorText: result.errorText,\n                    value,\n                })\n            }\n        }\n\n        return errors\n    }\n}\n\n\nexport function eachValid(fields: AnyFields) {\n    const firstErrors: Store<ValidationError | null>[] = []\n  \n    for (const fieldName in fields) {\n        if (!fields.hasOwnProperty(fieldName)) continue\n        const { $firstError } = fields[fieldName]\n        firstErrors.push($firstError)\n    }\n  \n    const $firstErrors = combine(firstErrors)\n  \n    return $firstErrors.map((errors) => errors.every(error => error === null))\n}\n","import { useUnit } from \"effector-react\"\nimport {\n    Field,\n    ValidationError,\n    AnyFormValues,\n    Form\n} from \"./types\"\n\ntype ErrorTextMap = {\n  [key: string]: string\n}\n\ntype AddErrorPayload = { rule: string; errorText?: string }\n\ntype ConnectedField<Value> = {\n  name: string\n  value: Value\n  errors: ValidationError<Value>[]\n  firstError: ValidationError<Value> | null\n  hasError: () => boolean\n  onChange: (v: Value) => Value\n  onBlur: (v: void) => void\n  errorText: (map?: ErrorTextMap) => string\n  addError: (p: AddErrorPayload) => AddErrorPayload\n  validate: (v: void) => void\n  isValid: boolean\n  isDirty: boolean\n  isTouched: boolean\n  touched: boolean\n  reset: (v: void) => void\n  set: (v: Value) => Value\n  resetErrors: (v: void) => void\n}\n\ntype ConnectedFields<Values extends AnyFormValues> = {\n  [K in keyof Values]: ConnectedField<Values[K]>\n}\n\ntype AnyConnectedFields = {\n  [key: string]: ConnectedField<any>\n}\n\nexport function useField<Value>(field: Field<Value>): ConnectedField<Value> {\n    const {\n        value,\n        errors,\n        firstError,\n        isValid,\n        isDirty,\n        isTouched: touched,\n    } = useUnit(field.$field)\n\n    return {\n        name: field.name,\n        value,\n        errors,\n        firstError,\n        isValid,\n        isDirty,\n        touched,\n        isTouched: touched,\n        onChange: useUnit(field.onChange),\n        onBlur: useUnit(field.onBlur),\n        addError: useUnit(field.addError),\n        validate: useUnit(field.validate),\n        reset: useUnit(field.reset),\n        set: useUnit(field.onChange),\n        resetErrors: useUnit(field.resetErrors),\n        hasError: () => {\n            return firstError !== null\n        },\n        errorText: (map) => {\n            if (!firstError) {\n                return \"\"\n            }\n            if (!map) {\n                return firstError.errorText || \"\"\n            }\n            if (map[firstError.rule]) {\n                return map[firstError.rule]\n            }\n            return firstError.errorText || \"\"\n        }\n    }\n\n}\n\ntype Result<Values extends AnyFormValues> = {\n  fields: ConnectedFields<Values>\n  values: Values\n  hasError: (fieldName?: keyof Values) => boolean\n  eachValid: boolean\n  isValid: boolean\n  isDirty: boolean\n  isTouched: boolean\n  touched: boolean\n  errors: (fieldName: keyof Values) => (\n    ValidationError<Values[typeof fieldName]>[]\n  )\n  error: (fieldName: keyof Values) => (\n    ValidationError<Values[typeof fieldName]>\n  ) | null\n  errorText: (fieldName: keyof Values, map?: ErrorTextMap) => string\n  submit: (p: void) => void\n  reset: (p: void) => void\n  setInitial: (p: Partial<Values>) => Partial<Values>\n  setForm: (p: Partial<Values>) => Partial<Values>\n  set: (p: Partial<Values>) => Partial<Values>\n  formValidated: (p: Values) => Values\n}\n\nexport function useForm<Values extends AnyFormValues>(\n    form: Form<Values>\n): Result<Values> {\n    const connectedFields = {} as AnyConnectedFields\n    const values = {} as AnyFormValues\n\n    for (const fieldName in form.fields) {\n        if (!form.fields.hasOwnProperty(fieldName)) continue\n        const field = form.fields[fieldName]\n        const connectedField = useField(field)\n        connectedFields[fieldName] = connectedField\n        values[fieldName] = connectedField.value\n    }\n\n    const {\n        isValid: eachValid,\n        isDirty,\n        touched,\n    } = useUnit(form.$meta)\n\n\n    const hasError = (fieldName?: string): boolean => {\n        if (!fieldName) {\n            return !eachValid\n        }\n        if (connectedFields[fieldName]) {\n            return Boolean(connectedFields[fieldName].firstError)\n        }\n        return false\n    }\n\n    const error = (fieldName: string) => {\n        if (connectedFields[fieldName]) {\n            return connectedFields[fieldName].firstError\n        }\n        return null\n    }\n\n    const errors = (fieldName: string) => {\n        if (connectedFields[fieldName]) {\n            return connectedFields[fieldName].errors\n        }\n        return []\n    }\n\n    const errorText = (fieldName: string, map?: ErrorTextMap) => {\n        const field = connectedFields[fieldName]\n        if (!field) {\n            return \"\"\n        }\n        if (!field.firstError) {\n            return \"\"\n        }\n        if (!map) {\n            return field.firstError.errorText || \"\"\n        }\n        if (map[field.firstError.rule]) {\n            return map[field.firstError.rule]\n        }\n        return field.firstError.errorText || \"\"\n    }\n\n    return {\n        fields: connectedFields as ConnectedFields<Values>,\n        values,\n        hasError,\n        eachValid,\n        isValid: eachValid,\n        isDirty,\n        isTouched: touched,\n        touched,\n        errors,\n        error,\n        errorText,\n        reset: useUnit(form.reset),\n        setInitial: useUnit(form.setInitial),\n        submit: useUnit(form.submit),\n        setForm: useUnit(form.setForm),\n        set: useUnit(form.setForm), // set form alias\n        formValidated: useUnit(form.formValidated),\n    } as Result<Values>\n}\n","import {\n    Event,\n    Store,\n    combine,\n    sample,\n    guard,\n} from \"effector\"\nimport {\n    AnyFields,\n    AnyFormValues,\n    FormConfig,\n    Form,\n} from \"./types\"\nimport { eachValid } from \"./validation\"\nimport {\n    createField,\n    bindValidation,\n    bindChangeEvent,\n} from \"./field\"\nimport { createFormUnit } from \"./create-form-unit\"\n\nfunction createFormValuesStore(\n    fields: AnyFields\n): Store<AnyFormValues> {\n    const shape: { [key: string]: Store<any> } = {}\n\n    for (const fieldName in fields) {\n        if (!fields.hasOwnProperty(fieldName)) continue\n        shape[fieldName] = fields[fieldName].$value\n    }\n\n    return combine(shape)\n}\n\nexport function createForm<Values extends AnyFormValues>(\n    config: FormConfig<Values>\n) {\n    const {\n        filter: $filter,\n        domain,\n        fields: fieldsConfigs,\n        validateOn,\n        units,\n    } = config\n\n    const fields: AnyFields = {}\n\n    const dirtyFlagsArr: Store<boolean>[] = []\n    const touchedFlagsArr: Store<boolean>[] = []\n\n    // create units\n    for (const fieldName in fieldsConfigs) {\n        if (!fieldsConfigs.hasOwnProperty(fieldName)) continue\n\n        const fieldConfig = fieldsConfigs[fieldName]\n\n        const field = createField(fieldName, fieldConfig, domain)\n\n        fields[fieldName] = field\n        dirtyFlagsArr.push(field.$isDirty)\n        touchedFlagsArr.push(field.$touched)\n    }\n\n    const $form = createFormValuesStore(fields)\n    const $eachValid = eachValid(fields)\n    const $isFormValid = $filter\n        ? combine($eachValid, $filter, (valid, filter) => valid && filter)\n        : $eachValid\n    const $isDirty = combine(dirtyFlagsArr).map(\n        (dirtyFlags) => dirtyFlags.some(Boolean)\n    )\n    const $touched = combine(touchedFlagsArr).map(\n        (touchedFlags) => touchedFlags.some(Boolean)\n    )\n\n    const $meta = combine({\n        isValid: $eachValid,\n        isDirty: $isDirty,\n        touched: $touched,\n    })\n\n    const validate = createFormUnit.event<void>({\n        domain,\n        existing: units?.validate,\n    })\n\n    const submitForm = createFormUnit.event<void>({\n        domain,\n        existing: units?.submit,\n    })\n\n    const formValidated = createFormUnit.event({\n        domain,\n        existing: units?.formValidated,\n    })\n\n    const setInitial = createFormUnit.event<Partial<AnyFormValues>>({\n        domain,\n        existing: units?.setInitial as Event<Partial<AnyFormValues>>,\n    })\n\n    const setForm = createFormUnit.event<Partial<AnyFormValues>>({\n        domain,\n        existing: units?.setForm as Event<Partial<AnyFormValues>>,\n    })\n\n    const resetForm = createFormUnit.event({\n        domain,\n        existing: units?.reset,\n    })\n\n    const resetValues = createFormUnit.event({\n        domain,\n        existing: units?.resetValues,\n    })\n\n    const resetErrors = createFormUnit.event({\n        domain,\n        existing: units?.resetErrors,\n    })\n\n    const resetTouched = createFormUnit.event({\n        domain,\n        existing: units?.resetTouched,\n    })\n\n    const submitWithFormData = sample({\n        source: $form,\n        clock: submitForm,\n    })\n    const validateWithFormData = sample({\n        source: $form,\n        clock: validate\n    })\n\n    // bind units\n    for (const fieldName in fields) {\n        if (!fields.hasOwnProperty(fieldName)) continue\n\n        const fieldConfig = fieldsConfigs[fieldName]\n        const field = fields[fieldName]\n\n        bindChangeEvent(\n            field, \n            setForm, \n            resetForm,\n            resetTouched, \n            resetValues,\n            setInitial, \n        )\n\n        if (!fieldConfig.rules) continue\n\n        bindValidation({\n            $form,\n            rules: fieldConfig.rules,\n            submitEvent: submitForm,\n            resetFormEvent: resetForm,\n            resetValues,\n            resetErrors,\n            validateFormEvent: validate,\n            field,\n            formValidationEvents: validateOn ? validateOn : [\"submit\"],\n            fieldValidationEvents: fieldConfig.validateOn\n                ? fieldConfig.validateOn\n                : [],\n        }, { sid: fieldName })\n    }\n\n    guard({\n        source: submitWithFormData as unknown as Event<Values>,\n        filter: $isFormValid,\n        // TODO: fix\n        target: formValidated,\n    })\n\n    guard({\n        source: validateWithFormData as unknown as Event<Values>,\n        filter: $isFormValid,\n        target: formValidated,\n    })\n\n    return {\n        fields,\n        $values: $form,\n        $eachValid,\n        $isValid: $eachValid,\n        $isDirty: $isDirty,\n        $touched: $touched,\n        $meta,\n        submit: submitForm,\n        validate,\n        resetTouched,\n        reset: resetForm,\n        resetValues,\n        resetErrors,\n        setInitial,\n        setForm,\n        set: setForm,\n        formValidated,\n    } as unknown as Form<Values>\n}\n"],"names":["createFormUnit","store","init","domain","existing","effectorData","and","sid","createStore","event","createEvent","createField","fieldName","fieldConfig","_fieldConfig$units","_fieldConfig$units2","_fieldConfig$units3","_fieldConfig$units4","_fieldConfig$units5","_fieldConfig$units6","_fieldConfig$units7","_fieldConfig$units8","_fieldConfig$units9","_fieldConfig$units10","_fieldConfig$units11","_fieldConfig$units12","initValue","$initialValue","units","name","$value","$errors","$firstError","map","errors","$isDirty","combine","initialValue","value","or","$touched","$isTouched","onChange","onBlur","changed","addError","validate","resetErrors","resetValue","reset","$isValid","firstError","$field","isValid","isDirty","isTouched","set","filter","bindValidation","$form","validateFormEvent","submitEvent","resetFormEvent","resetValues","field","rules","resetErrorsFormEvent","formValidationEvents","fieldValidationEvents","rulesSources","source","validator","rulesOrResolver","form","i","length","rule","result","push","errorText","eventsNames","validationEvents","includes","validationTrigger","sample","fieldValue","clock","merge","addErrorWithValue","fn","on","_","newError","bindChangeEvent","setForm","resetForm","resetTouched","setInitial","guard","target","curr","updateSet","hasOwnProperty","useField","touched","useUnit","hasError","config","$filter","fields","fieldsConfigs","validateOn","dirtyFlagsArr","touchedFlagsArr","_withFactory","method","shape","createFormValuesStore","$eachValid","firstErrors","every","error","eachValid","$isFormValid","valid","dirtyFlags","some","Boolean","touchedFlags","$meta","submitForm","submit","formValidated","submitWithFormData","validateWithFormData","$values","connectedFields","values","connectedField"],"mappings":"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"}